pragma solidity ^0.4.19;

interface token {
    function transfer(address receiver, uint amount) public;
}

/*
 * Contract permits owner to reclaim unsold tokens from the crowdsale contract
 */
contract withdrawToken {
    function transfer(address _to, uint _value) external returns (bool success);
    function balanceOf(address _owner) external constant returns (uint balance);
}

/*
 * SafeMath - math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/*
 * Crowdsale contract constructor
 */
contract Crowdsale {
    using SafeMath for uint256;

    address public owner;
    uint256 public amountRaised;
    uint256 public amountRaisedPhase;
    uint256 public priceTier1;
    uint256 public priceTier2;
    uint256 public priceTier3;
    token public tokenReward;
    mapping(address => uint256) public balanceOf;
    mapping(address => bool) public whitelist;

    event FundTransfer(address backer, uint amount, bool isContribution);

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function Crowdsale(
        address ownerAddress,
        uint256 weiCostPerTokenTier1,
        uint256 weiCostPerTokenTier2,
        uint256 weiCostPerTokenTier3,
        address rewardTokenAddress
    ) public {
        owner = ownerAddress;
        priceTier1 = weiCostPerTokenTier1;
        priceTier2 = weiCostPerTokenTier2;
        priceTier3 = weiCostPerTokenTier3;
        tokenReward = token(rewardTokenAddress);
    }

    /*
     * Fallback function for contributions
     */

    function () public payable {
        uint256 amount = msg.value;
        require (whitelist[msg.sender]); /* ALL CONTRIBUTORS MUST JOIN THE IGNITE WHITELIST */
        require(msg.value >= 10 ether && msg.value <= 1000 ether);

        /*
         * TIER 1 - 12% discount on crowdsale pricing
         */

        if(msg.value >= 10 ether && msg.value < 100 ether) {
            balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);
            amountRaised = amountRaised.add(amount);
            amountRaisedPhase = amountRaisedPhase.add(amount);
            tokenReward.transfer(msg.sender, amount.mul(10**18).div(priceTier1));
            FundTransfer(msg.sender, amount, true);
        }

        /*
         * TIER 2 - 25% discount on crowdsale pricing
         */

        else if(msg.value >= 100 ether && msg.value < 500 ether) {
            balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);
            amountRaised = amountRaised.add(amount);
            amountRaisedPhase = amountRaisedPhase.add(amount);
            tokenReward.transfer(msg.sender, amount.mul(10**18).div(priceTier2));
            FundTransfer(msg.sender, amount, true);
        }

        /*
         * TIER 3 - 35% discount on crowdsale pricing
         */

        else if(msg.value >= 500 ether && msg.value <= 1000 ether) {
            balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);
            amountRaised = amountRaised.add(amount);
            amountRaisedPhase = amountRaisedPhase.add(amount);
            tokenReward.transfer(msg.sender, amount.mul(10**18).div(priceTier3));
            FundTransfer(msg.sender, amount, true);
        }

    }

   /*
    * Add and remove addreses to/from the Ignite Whitelist
    */ 
    function addToWhitelist(address[] _addresses) public onlyOwner {
    for (uint i = 0; i < _addresses.length; i++) {
            whitelist[_addresses[i]] = true;
        }
    }

    function removeFromWhitelist(address[] _addresses) public onlyOwner {
    for (uint i = 0; i < _addresses.length; i++) {
            whitelist[_addresses[i]] = false;
        }
    }

    /*
     * Allow owner to reclaim unsold tokens
     */
    function withdrawTokens(address tokenContract) external onlyOwner {
        withdrawToken tc = withdrawToken(tokenContract);

        tc.transfer(owner, tc.balanceOf(this));
    }
    
    /*
     * Allow owner to withdraw crowdsale proceeds
     */
    function safeWithdrawal() external onlyOwner {
        uint256 withdraw = amountRaisedPhase;
        amountRaisedPhase = 0;
        FundTransfer(owner, withdraw, false);
        owner.transfer(withdraw);
    }
    
}
