pragma solidity ^0.4.19;

/* 
 * IGNITE RATINGS EXCHANGE TOKEN - IGNITEX (IGNX). COPYRIGHT 2018 TRUSTIC HOLDING INC.
 * IGNX IS READILY SWAPPABLE FOR IGNT AT A FIXED RATE, AND VICE VERSA.
 */

/*
 * CONTRACT IS OWNED
 */
contract owned {
    address public owner;

    function owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}

/*
 * SAFEMATH - MATH OPERATIONS WITH SAFETY CHECKS THAT THROW ON ERROR
 */

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/*
 * TOKEN LEVERAGES APPROVE AND CALL AND IMPLEMENTS TOKEN RECIPIENT INTERFACE
 */
interface tokenRecipient { 
function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; 
}

/*
 * STANDARD TOKEN CONSTRUCTOR
 */
contract TokenERC20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }

    /*
     * STANDARD INTERNAL TRANSFER FUNCTION
     */
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(_value > 0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }

    /*
     * STANDARD PUBLIC TRANSFER FUNCTION
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }

    /*
     * TRANSFER TOKENS FROM OTHER ADDRESS
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // Check allowance
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }

    /*
     * SET ALLOWANCE FOR OTHER ADDRESS
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }

    /*
     * SET ALLOWANCE FOR OTHER ADDRESS AND NOTIFY
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
}

/*******************************************/
/*  IGNITE RESTRICTABLE TOKEN STARTS HERE  */
/*******************************************/

contract RestrictableToken is owned, TokenERC20 {

    mapping (address => bool) public swapRestricted;
    mapping (address => bool) public transferRestricted;
    mapping (address => bool) public adminAddress;

    event SwapRestricted(address target, bool restricted);
    event TransferRestricted(address target, bool restricted);
    event AdminAddress(address target, bool admin);

    function RestrictableToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}

    /*
     * INTERNAL TRANSFER
     */
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                            
        require (balanceOf[_from] >= _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];                     
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }

    /*
     * TRANSFER RESTRICTION
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
            require(!transferRestricted[msg.sender] || adminAddress[_to]);
            _transfer(msg.sender, _to, _value);
            return true;
    }

    /*
     * SWAP RESTRICTION
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        require(!swapRestricted[msg.sender] || adminAddress[_spender]);
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }

    /*
     * SWAP RESTRICT ADDRESSES
     */
    function restrictSwap (address[] target, bool restricted) public onlyOwner {
        for (uint i = 0; i < target.length; i++) {
          swapRestricted[target[i]] = restricted;
        }
    }

    /*
     * TRANSFER RESTRICT ADDRESSES
     */
    function restrictTransfer (address[] target, bool restricted) public onlyOwner {
        for (uint i = 0; i < target.length; i++) {
          transferRestricted[target[i]] = restricted;
        }
    }

    /*
     * SET ADMIN ADDRESSES
     */
    function setAdminAddress(address target, bool valid) onlyOwner public {
      adminAddress[target] = valid;
      AdminAddress(target, valid);
    }
}
